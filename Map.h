//#pragma once
#include <SFML\Graphics.hpp>
#include <iostream>
//#include <ctime>
//#include <cstdlib>
#include <vector>


const int WIDTH_MAP = 20;
const int HEIGHT_MAP = 13;

std::vector<sf::String> MAP = {
    "00000000000000000000",
    "01111111111111111110",
    "01000000000000000010",
    "01011111111111111101",
    "01010000000000000101",
    "01010111111111101010",
    "01010000000000101010",
    "01010111111111101010",
    "01000000000000000101",
    "01111111111111111110",
    "01000000000000000010",
    "01111111111111111110",
    "00000000000000000000"
};

//sf::String MAP[WIDTH_MAP][HEIGHT_MAP] = {
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
//    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
//    {0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
//    {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0},
//    {0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0},
//    {0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0},
//    {0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0},
//    {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0},
//    {0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
//    {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
//    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
//};

//
//enum TileType {
//    WALL = 0,
//    PATH = 1,
//    GOLD = 2,
//    KEYS = 3,
//    DOOR = 4,
//    TREASURES = 5
//};
//
//struct Coord {
//    int x, y;
//    Coord(int _x, int _y) : x(_x), y(_y) {}
//};
//
//void printGrid(int grid[ROW][COL]) {
//    for (int i = 0; i < ROW; ++i) {
//        for (int j = 0; j < COL; ++j) {
//            std::cout << grid[i][j] << " ";
//        }
//        std::cout << std::endl;
//    }
//}
//
//void placeItems(int grid[ROW][COL]) {
//    // Place 1 key
//    Coord key_pos(0, 0);
//    while (grid[key_pos.x][key_pos.y] != PATH) {
//        key_pos.x = rand() % ROW;
//        key_pos.y = rand() % COL;
//    }
//    grid[key_pos.x][key_pos.y] = KEYS;
//
//    // Place 1 treasures
//    Coord treasure_pos(0, 0);
//    while (grid[treasure_pos.x][treasure_pos.y] != PATH) {
//        treasure_pos.x = rand() % ROW;
//        treasure_pos.y = rand() % COL;
//    }
//    grid[treasure_pos.x][treasure_pos.y] = TREASURES;
//
//    // Place 7 gold
//    int gold_count = 0;
//    while (gold_count < 7) {
//        Coord gold_pos(0, 0);
//        gold_pos.x = rand() % ROW;
//        gold_pos.y = rand() % COL;
//        if (grid[gold_pos.x][gold_pos.y] == PATH) {
//            grid[gold_pos.x][gold_pos.y] = GOLD;
//            gold_count++;
//        }
//    }
//}
//
//int main() {
//    int grid[ROW][COL] = {
//        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//        {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
//        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
//        {0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
//        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0},
//        {0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0},
//        {0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0},
//        {0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0},
//        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0},
//        {0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0},
//        {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
//        {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
//        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
//    };
//
//    srand(time(0));
//    placeItems(grid);
//
//    std::cout << "Labyrinth Grid:\n";
//    printGrid(grid);
//
//    return 0;
//}
